El siguiente es una apunte del curso /Análisis Estático de Programas Lógicos Basado en Interpretación Abstracta/.

- Presentación: [[https://vaucheret.github.io/AILP/ailp.html][HTML]] | [[https://github.com/vaucheret/vaucheret.github.io/tree/932b7f5b158c756c487cac700ba8eb080cf4340d/AILP][Fuentes]]
- Fuentes de este apunte: [[https://github.com/cnngimenez/apuntes-AILP][Repositorio en Github]]
- Códigos usados:  [[https://github.com/cnngimenez/apuntes-AILP/tree/main/tangled][Ver directorio ./tangled/]]
- Descargar códigos y fuentes completo: [[https://github.com/cnngimenez/apuntes-AILP/archive/main.zip][Descargar ZIP completo]] (O ir al repositorio de Github).

https://i.creativecommons.org/l/by-sa/4.0/88x31.png

This work is licensed under a [[http://creativecommons.org/licenses/by-sa/4.0/][Creative Commons Attribution-ShareAlike 4.0 International License]].

Este obra está bajo una [[http://creativecommons.org/licenses/by-sa/4.0/][licencia de Creative Commons Reconocimiento-CompartirIgual 4.0 Internacional]].


Los mismos términos utilizados en Ciao Prolog (definiciones de term, atom, predicate, etc.) también se pueden encontrar en el [[https://www.swi-prolog.org/pldoc/man?section=glossary][glosario de SWI-Prolog]].

* Aserciones

** Formato
Normalmente, el formato de las aserciones en prolog sigue al siguiente estructura:

: :- [estado] [aserción] [pred] [: precond] [=> postcond] [+ propcomp] [# "comentario"]

La tabla ref:tab:aserciones_estados describe los distintos valores del campo ~[estado]~. Éstos pueden ser escritos por el usuario o por CiaoPP como salida del chequeo. Los estados que mayormente se escriben por el usuario es ~trust~ y ~check~.

Los tipos de aserciones que se escriben en el campo ~[aserción]~ están detallados en la tabla ref:tab:aserciones_tipos.

Usualmente, una aserción es interpreta de la siguiente manera:

- ~[pred]~ es la llamada al predicado (/goal/) y debe ser cierta.
- ~[: precond]~ si existe debe ser verdadera.
- Entonces, ~[=> postcond]~ debe complirse, en cuyo caso el preprocesador retornará ~true~ o ~checked~ en el ~[estado]~.
- La propiedad de computaciónd indicada en ~[+ propcomp]~ debe cumplirse.

Si ~[pred]~ o ~[: precond]~ no se cumple, no se chequea la postcondición ni al propiedad de computabilidad. La aserción queda en forma de warning con ~check~ como estado.

#+caption: Estados posibles de la aserción. label:tab:aserciones_estados
| Estado  | Significado                               |
|---------+-------------------------------------------|
| trust   | Ingresada por el usuario,                 |
|         | confiar en la veracidad de la aserción.   |
|---------+-------------------------------------------|
| checked | La aserción fue verificada                |
|---------+-------------------------------------------|
| true    | Salida del compilador.                    |
|---------+-------------------------------------------|
| false   | Error de compilación                      |
|---------+-------------------------------------------|
| check   | Aserción con warnings, chequear aserción. |
 
- AS: Azúcar Sintáctico

#+caption: Tipos de aserciones y su significado. label:tab:aserciones_tipos
| Aserción | Significado                                      | AS |
|----------+--------------------------------------------------+----|
| pred     | Equivalente a calls, success y comp juntos       | sí |
|          | (dependiendo de los campos completados).         |    |
|----------+--------------------------------------------------+----|
| calls    | La llamada del predicado debe satisfacer         |    |
|          | la precondición indicada.                        |    |
|----------+--------------------------------------------------+----|
| entry    | Similar a calls pero declara la llamadas         |    |
|          | exportadas. Son confiadas por el compilador.     |    |
|----------+--------------------------------------------------+----|
| comp     | Toda llamada del predicado que cumpla con la     |    |
|          | precondición, debe cumplir con la propiedad      |    |
|          | de la computación dada.                          |    |
|----------+--------------------------------------------------+----|
| regtype  | Declara un tipo regular.                         |    |
|----------+--------------------------------------------------+----|
| success  | El predicado que cumpla con la precondición      |    |
|          | y retorne éxito debe verificar la postcondición. |    |
|----------+--------------------------------------------------+----|
| doc      | Documentación utilizada por Pldoc                |    |
|----------+--------------------------------------------------+----|
| test     | Testeo con instancias. Similar a success.        |    |

~test~ no se verifica con CiaoPP porque no trabaja con dominios abstractos.

Más información en los manuales de info (en Emacs posicionar el cursor sobre un link y presionar ~C-c C-o~).

- Aserciones: [[info:ciao#The Ciao assertion language][info:ciao#The Ciao assertion language]].
- Tipos de datos básicos y propiedades: [[info:ciao#Basic data types and properties][info:ciao#Basic data types and properties]] (predicados como ~term/1, atm/1, list/1, list/2, num/1~, etc.).
- Aserciones de computabilidad: [[info:ciao#Properties which are native to analyzers]].
- Explicación de los tipos regulares: [[info:ciao#Declaring regular types][info:ciao#Declaring regular types]].
- Sintaxis para la documentation con PlDoc: [[info:ciao#Documentation comments][info:ciao#Documentation comments]].

Módulos a utilizar:

- ~assertions~
- ~regtypes~
- ~nativeprops~
- ~basic_props~ (este módulo es importado automáticamente con ~assertions~)

*** Azúcares sintácticos

: pred qsort(A,B) : (list(A), var(B)) => list(B) + not_fails.

Es equivalente a lo siguiente:

#+begin_src ciao
:- calls qsort(A,B) : (list(A), var(B)).
:- success qsort(A,B) : (list(A), var(B)) => list(B).
:- comp qsort(A,B) : (list(A) , var(B)) + not_fails.
#+END_SRC

** regtype
Para utilizar ~regtype~, se debe agregar el módulo ~regtypes~. Más información en: [[info:ciao#Declaring regular types][info:ciao#Declaring regular types]].

Declara como tipos regulares un predicado. En otras palabras, declararía un dominio abstracto. Luego se puede utilizar en otras aserciones para chequear que una varible está en un dominio.

Por ejemplo, en el código del autómata se puede utilizar el tipo regtype para declarar el tipo ~car/1~ y en el entry se declara que C es una lista con dominio en ~car/1~ y S de tipo ~initial/1~

#+begin_src ciao
  :- module(aut, _, [assertions, regtypes]).

  :- entry accepts_(S,C) : (initial(S), list(car, C)).
  :- regtype car/1.

  car(a).
  car(b).

  %% ...
  accepts_(State, []) :-
      final(State).
  %% ...
#+END_SRC

El analizador de código de CiaoPP puede generar nuevos regtypes para declarar nuevos dominios. Por ejemplo, en el siguiente código se generan dos regtypes, ~rt4/1~ y ~rt5/1~ definiendo los dominios de las dos variables de ~te/2~. 

#+BEGIN_SRC ciao
:- module(app, _, [assertions, nativeprops]).

te(1, "hello").
te(0, 0).
#+END_SRC

La salida del analizador es la siguiente:

#+BEGIN_SRC ciao
:- module(_1,_2,[assertions,nativeprops,regtypes]).

:- true pred te(_A,_B)
   : ( term(_A), term(_B) )
   => ( rt4(_A), rt5(_B) ).

:- true pred te(_A,_B)
   : mshare([[_A],[_A,_B],[_B]])
   => ground([_A,_B]).

te(1,"hello").
te(0,0).


:- regtype rt4/1.
rt4(0).
rt4(1).

:- regtype rt5/1.
rt5(0).
rt5([104,101,108,108,111]).
#+END_SRC


** comp
Varios de los predicados para ~comp~ están definidos en el módulo ~assertions/native_pros~. Es necesario incluirlo en el preámbulo ~module~ como ~nativeprops~. Por ejemplo: 

#+begin_src ciao
:- module(the_file, _, [assertions, nativeprops]).
#+END_SRC

O sino, se puede agregar como módulo:

#+begin_src ciao
:- use_module(library(assertions/native_props)).
#+END_SRC

Más información en: [[info:ciao#Properties which are native to analyzers][info:ciao#Properties which are native to analyzers]]

Algunos predicados para chequeo de computación interesantes son: ~not_fails, no_choicepoints, possibly_fails, fails, non_det, is_det, possibly_nondet, finite_solutions, terminates, exception, no_exception, possible_exceptions~.

* Checking
CiaoPP trabaja sobre dominios abstractos y no concretos. Por ello, ~test~ no funcionaría si se brindan datos concretos. En ese caso utilizar los testeos de unidad.

Los dominios abstractos se irán creando a medida que sea necesario con nombres de la forma ~rtNNN~ donde NNN es un número. A menos que se declaren con ~regtype/1~.

Se puede utilizar el predicado ~output/0~ en la consola CiaoPP para obtener el archivo con los resultados del análisis y el chequeo. 


* Teoría

#+BEGIN_SRC latex :file imgs/summary.png :results link file 
\begin{tikzpicture}
  [every annotation/.style={fill=red!20}]
  
  \path[mindmap,
    concept color=black,
    grow cyclic,
    text=white,
    level 1/.append style={sibling angle=90},
    %% level 2/.append style={sibling distance=1cm},
    every node/.style={concept}
  ]
  %
  node {Interpretación Abstracta}
  %
  child[concept color=violet]{node (semcol) {Semántica colectoras}
    child{node {Retículos ``Se aproxima mejor''}}
    child{node {Inserción de Galois}
      child{node {\scriptsize Aprox. segura}}
      child[concept color=red!50!black]
      {node {\scriptsize Teorema fundamental}}
    }
  }
  %
  child[concept color=blue!50!black]{node {Aproxi\-maciones}
    child {node {Aproxi\-mación correcta}
      child {node {Idea básica}}
      child {node {De una fnc.}}
    }
    child {node {De un programa}
      child{node{$F_P$ (concreto)}}
      child{node{$F_P^*$}}
    }
    child {node (sigabs) {Significado abstracto $F_\alpha$}
      child{node {Se\-gu\-ri\-dad}}
    }
  }
  %
  child[concept color=orange]{node (domabs) {Dominio abstracto}
    child{node {Función de concretización\\$\gamma$}}
    child{node {Función de abstracción\\$\alpha$}}
  }
  %
  child[concept color=green!50!black]{node {Propiedades}
    child{node{Exactitud}
      child[concept color=blue!50!black]{
        node{\scriptsize Aprox. correcta}}
    }
    child{node{Termi\-nación}}
    child{node{Eficiencia}}
    child{node{Precisión}}
    child{node{Utilidad}}
  };


  \node[annotation, below right] at (semcol.south east) (annsemcol) {\scriptsize No alcanza con definir ``entrada-salida''. Se necesita información de ``estado'' en cada punto del programa.};

  
  \tikzstyle{every node}=[draw]
  \node[above right=2.5cm of domabs] (domabsimg) {%%
    \includegraphics[width=8cm]{%%
      /home/poo/repos/curso-AILP/imgs/alphagamma.png}};  
  \node[right=2.5 of sigabs] (sigabsimg) {%%
    \includegraphics[width=7cm]{%%
      /home/poo/repos/curso-AILP/imgs/absmean.png}};

  \draw[arrows=->, ultra thick, orange]
  (domabs) edge (domabsimg.south west);
  \draw[arrows=->, ultra thick, blue!50!black, bend right]
  (sigabs) edge (sigabsimg);
  \draw[arrows=->, ultra thick, violet, bend left]
  (semcol) edge (annsemcol);
\end{tikzpicture}
#+END_SRC

#+RESULTS:
[[file:imgs/summary.png]]

Siendo:

- $D$ un dominio concreto.
- D_{\alpha} la abstracción de dicho dominio.
- \alpha la función de abstracción.
- \gamma la función de concretización.
- $\wp (D)$ es el conjunto partes de $D$. 
- $F_{P} : D \to D$ es la función concreta que representa al programa $P$
- $F_\alpha D_\alpha \to D_\alpha$ la función de significado abstracto de una función F_{P}. 
- $F_{P}^{*} : \wp(D) \to \wp(D) \quad F_P^*(S) = \{F_P(x) | x \in S\}$ es una función dependiente de F_{P} que asigna conjuntos de entradas del programa a conjuntos de salida. 
- $\lambda \in D_\alpha$ un elemento del dominio abstracto.
- $d \in D$ un elemento del dominio.
- $\lamda_r$ resultado/s de la función F_{\alpha}
- $d_r$ resultado/s de la función F^{*}_{P}.



** Propiedades de la interpretación abstracta
#+BEGIN_SRC latex :file imgs/1.props_interp_abstr.png :results link file 
\begin{tikzpicture}
  \path[mindmap, concept color=black, text=white]
  %
  node[concept,align=center]{Propiedades de la\\Interpretación Abstracta}
  [clockwise from=35]
  child[concept color=red!50!black] {
    node[concept] {Requeridas}
    child {node[concept] (exac) {Exactitud}}
    child {node[concept] (term) {Terminación}}
  }
  %
  child[concept color=green!50!black]{
    node[concept] {Deseables}
    child {node[concept] (efic) {Eficiencia}}
    child {node[concept] (prec) {Precisión}}
    child {node[concept] (util) {Utilidad}}
  };

  \node[annotation, right=of exac, fill=red!20] {\small Aproximaciones correctas. La aproximación sea lo más conservadora posible.};
  \node[annotation, right=of term, fill=red!20] {\small La compilación debe terminar.};
  \node[annotation, right=of efic, fill=red!20] {\small Tiempo de análisis debe ser finito y lo más pequeño posible.};
  \node[annotation, right=of prec, fill=red!20] {\small Precisión en la información recopilada.};
  \node[annotation, right=of util, fill=red!20] {\small Determinar qué información vale la pena recopilar.};

\end{tikzpicture}
#+END_SRC

#+RESULTS:
[[file:imgs/1.props_interp_abstr.png]]

** Aproximaciones correctas
#+BEGIN_SRC latex :file imgs/2.aprox_correctas.png :results link file 
\begin{tikzpicture}
  \path[mindmap, concept color=black, text=white]
  %
  node[concept,align=center]{Aproximaciones Correctas}
  [clockwise from=35]
  child[concept color=green!50!black] {
    node[concept] {Para una propiedad $p$}
    child[grow=0] {node[concept]
      {dpq': $\forall x, x \in S \Rightarrow p(x)$}
      child {node[concept] {\scriptsize Alter\-na\-ti\-va}
        [grow'=right, sibling distance=1.75cm]
        %
        child{node[concept, align=center]
          {\scriptsize Cons\-tru\-ir}
          child[concept color=white!20]{node[concept, text=black]
            {\scriptsize un cjto. $S_a \supseteq S$}
          }
        }
        %
        child{node[concept]
          {\scriptsize Demos\-trar}
          child[concept color=white!20]{node[concept, text=black]
            {\scriptsize $\forall x x \in S_a \Rightarrow p(x)$}
          }
        }
        %
        child[concept color=red!50!black]{node[concept]
          {\scriptsize $\therefore$}
          child{node[concept]
            {\scriptsize $S_a$ es una aprox. segura de $S$}
          }
        }
      }
    }
  }
  %%
  child[concept color=green!50!black] {
    node[concept] {Para una función $F$}
    child[grow=0, level distance=3.5cm] {node[concept]
      {dpq': $\forall x$ $x \in S \Rightarrow p(F(x))$}
      [grow'=right, sibling distance=1.75cm]
      child[level distance=2.5cm] {node[concept]
        {\scriptsize Buscar}
        child[concept color=white!20]{node[concept, text=black]
          {\scriptsize una fnc. $G: S \rightarrow S$}
        }
      }
      child[level distance=2.5cm] {node[concept]
        {\scriptsize Demos\-trar}
        child[concept color=white!20]{node[concept, text=black]
          {\scriptsize $\forall x, x \in S p(G(x)) \Rightarrow p(F(x))$}
        }
      }
      child[level distance=2.5cm, concept color=red!50!black] {node[concept]
        {\scriptsize $\therefore$}
        child{node[concept]
          {\scriptsize $G$ es una aprox. segura de $S$}
        }
      }
    }
  };
\end{tikzpicture}
#+END_SRC

#+RESULTS:
[[file:imgs/2.aprox_correctas.png]]



** Función de concretización 
Sea D_{\alpha} un dominio abstracto y $\wp(D)$ partes de (o "conjunto potencia de") un dominio concreto, se dice que $\gamma : D_\alpha \to \wp(D)$ es la función de concretización.

Por ejemplo, sea el dominio abstracto $D_\alpha = \{ [-],[0],[+], \top \}$. Se puede definir a \gamma de la siguiente manera:

\begin{align*}
\gamma([-]) &= \{x \in Z \arrowvert x < 0  \} \\
\gamma([0]) &= \{0\} \\
\gamma([+]) &= \{x \in Z \arrowvert x > 0\} \\
\gamma(\top) &= Z 
\end{align*}

Es preciso dar la definición de $\bot$ : $\gamma(\bot) = \emptyset$.

** Función de abstracción
Sea D un dominio y D_{\alpha} el dominio abstracto, se define a 
$\alpha : \wp(D) \rightarrow D_\alpha$ como la función de abstracción.

Ejemplo: $\alpha({1,2,3}) = [+]$

** Significado abstracto
La función $F_\alpha : D_\alpha \to D_\alpha$ se denomina *función de significado abstracto*.

*** Significado abstracto segura
Se dice que $F_\alpha$ es *segura* si:

$$\forall \lambda, \lambda \in D_\alpha, \gamma(F_\alpha(\lambda)) \supseteq F^*_P(\gamma(\lambda))$$

Por ejemplo: Sea $P = (y := x * -3)$ un programa con entrada $x$ y salida $y$. 
Entonces la función que representa a este programa concreto es $F_P = x * -3$.
Abstrayéndolo con la función de significado abstracto se obtiene $F_\alpha = x *_\alpha [-]$ donde $*_\alpha$ es la operación abstracta de los signos definida en los ejemplos anteriores.

Si el programa tiene como entrada un número positivo ($F_P(x) : x > 0$ abstrayéndolo resulta en $F_\alpha([+])$), entonces se obtiene: $F_\alpha([+]) = [+] *_\alpha [-] = [-]$.

** Semánticas colectoras
La semántica I/O que se viene tratando es muy escueta. El análisis de semánticas extendidas se basa en deducir información sobre el estado en los puntos de programa (/fixedpoints/). Pero diferentes puntos de programa pueden alcanzarse bajo diferentes estados y desde diferentes puntos. Por ello, se necesita calcular una colección semántica de estados abstractos para un punto de programa.

Se puede aumentar la eficiencia si se "resume" la semántica recolectada (/collecting semantics/). Para ello se puede utilizar la estructura de retículo (/lattice/) en el dominio abstracto.


*** Estructura de Retículo
Se puede estrablecer una operación de orden \le_{\alpha} sobre el dominio abstracto D_{\alpha}. Si $(D_\alpha, \le_\alpha)$ es un retículo completo, entonces para todo $S \subseteq D_\alpha$, existe un único mínimo límite superior $\sqcup S \in D_\alpha$. 

#+begin_center
El retículo se usa para "resumir" la semántica recolectada de los resultados que se van obteniendo en cada /fixpoint/.
#+end_center
** Inserción de Galois
Sea:
- D y D_{\alpha} retículos completos
- $\gamma : D_\alpha \to D$ una función monótona de concretización.
- $\alpha : D \to D_\alpha$ una función monótona de abstracción.

La estructura $(D_\alpha, \gamma, D, \alpha)$ se denomina *inserción de Galois* si cumple con lo siguiente:

- $\forall \lambda \in D_\alpha . \lambda = \alpha(\gamma(\lambda))$
- $\forall d \in D . d \subseteq \gamma(\alpha(d))$

#+begin_quote
La primer propiedad significa que si se aplica la concretización sobre un resultado abstracto (ej. números positivos $[+]$), y luego la volvemos a abstraer debe dar el mismo resultado y se mantiene consistente.

La segunda propiedad significa que si se intenta aplicar la abstracción sobre un resultado particular y luego la concretización, el resultado del cual partimos debe estra en el resultado final de \gamma.
#+end_quote

*** Aproximación Segura

Sea una inserción de Galois $(D_\alpha, \gamma, D, \alpha)$. Se dice que $\lambda \in D_\alpha$ se aproxima de forma segura a $d \in D$ sssi $d \subseteq \gamma(\lambda)$.

#+begin_quote
Una aproximación es segura si al aplicar la función de concretización sobre un elemento abstracto si d.
#+end_quote

*** Teorema fundamental
Dada una inserción de Galois $(D_\alpha, \gamma, D, \alpha)$ y dos funciones monótonas $F : D \to D$ y $F_\alpha : D_\alpha \to D_\alpha$.

Si F_{\alpha} es una aproximación de F entonces lfp(F_{\alpha})[fn:1] es una aproximación de lfp(F).

#+begin_quote
El teorema fundamental justifica que la aplicación del $lfp(F_\alpha)$ se refleja dentro de la aplicación de $lfp(F)$.  

En otras palabras aplicar $lfp(F_\alpha)$ refleja/mapea/aproxima a $lfp$ aplicado a la función que representa nuestro programa concreto, ofreciendo seguridad de que la abstracción aún representa nuestro programa.
#+end_quote

* Análisis de Programas Lógicos

#+BEGIN_SRC latex :file imgs/analisis_programas_logicos.png :results link file 
\begin{tikzpicture}
  [every annotation/.style={fill=red!20}]
  
  \path[mindmap,
    concept color=black,
    grow cyclic,
    text=white,
    level 1/.append style={sibling angle=80},
    %% level 2/.append style={sibling distance=1cm},
    every node/.style={concept}
  ]
  %
  node {Análisis de Programas Lógicos}
  %
  child {node {Casos intermedios/misc}}
  % 
  child[concept color=blue!50!black] {node (semope) {Semántica operativa}
    child[concept color=red!20, text=black] {node {a.k.a. ``Top-Down''}}
    child {node {De\-no\-ta\-cio\-nal}}
    child {node {Basada en SLD}
      child {node {\scriptsize ...}}
      child {node {\scriptsize Reac\-ti\-vo}}
      child {node {\scriptsize Pa\-ra\-le\-lo}}
    }
  }
  %
  child[concept color=green!50!black] {node (semdec) {Semántica declarativa}
    child[concept color=red!20, text=black] {node {a.k.a. ``Bottom-Up''}}
    child {node {Semántica de modelos mínimos}}
    child {node {Semántica de punto fijo}
      child[concept color=red!20, text=black] {
        node {\scriptsize ba\-sa\-da en $T_P$}}
    }
  };

  \node[annotation, left] at (semdec.west)
  {\scriptsize Relacionada con las consecuencias lógicas del programa};
  \node[annotation, above left=0.4cm of semope.north east]
  {\scriptsize Cercana al comportamiento del programa};
\end{tikzpicture}
#+END_SRC

#+RESULTS:
[[file:imgs/analisis_programas_logicos.png]]

** Semántica de Punto Fijo
*** Definiciones
- Un lenguaje de primer orden $L$, asociado a un programa $P$.
- Sea $U$ el *Universo de Herbrand*: El conjunto de todos los términos básicos de $L$
- Sea $B$ la sa *Base de Herbrand*: El conjunto de todos los átomos instanciados (/ground/) de $L$.
- Una *Interpretación de Herbrand* es un subconjunto de $B$.
- Sea $I$ es el *conjunto de todas las interpretaciones* de Herbrand.
- Un *Modelo de Herbrand* es una interpretación de Herbrand que contiene todas las consecuencias del programa.
- Sea $T_P : I \to I$ el *operador de consecuencia inmediata*. Está definido por:
\begin{align*}
T_P(M) =& \{h \in B \vert \exists C \in ground(P) \\
        & C = h \leftarrow b_1, \ldots, b_n \mbox{ y } \\
        & b_1, \ldots, b_n \in M\}
\end{align*}
- $T_P \uparrow \omega$ es el procedimiento para obtener el mínimo punto fijo comenzando desde $\omega = 1$.

Observar que la definición de T_{P} depende del programa P.

Considerar $ground(P)$ como el conjunto de todos los términos instanciados de P.
 
*** Ejemplo
Sea el siguiente programa P:

#+begin_src ciao
p(f(X)) :- p(X).
p(a).
q(a).
q(b).
#+END_SRC

Escrito formalmente:

$P = \{ p(f(X)) \leftarrow p(X). p(a). q(a). q(b). \}$

El Universo de Herbrand es:

$$U = \{ a,b,f(a),f(b),f(f(a)),f(f(b)),\ldots \}$$

La Base de Herbrand es:

$$B = \{ p(a),p(b),q(a),q(b),p(f(a)),p(f(b)),p(f(f(a))), p(f(f(b))), q(f(a))\ldots \}$$

El conjunto de todas las interpretaciones de Herbrand es:

$$I = \mbox{ todos los subconjuntos de } B$$

Un modelo de Herbrand es:

$$H = \{ q(a), q(b), p(a), p(f(a)), p(f(f(a))), \ldots \}$$

El procedimiento para obtener el mínimo punto fijo es:

\begin{align*}
T_P \uparrow 0 &= \{ p(a),q(a),q(b) \}\\
T_P \uparrow 1 &= \{ p(a),q(a),q(b),p(f(a)) \} \\
T_P \uparrow 2 &= \{ p(a),q(a),q(b),p(f(a)),p(f(f(a))) \} \\
\ldots \\
T_P \uparrow \omega &= H
\end{align*}      

Como consecuencia T_{P} \uparrow \omega obtiene todas las consecuencias lógicas del programa.

*** Interpretación abstracta "Bottom Up"
Aplicar la interpretación abstracta consiste en definir lo siguiente:

- Un dominio abstracto: I^{\alpha}
  - donde sus elementos son aproximaciones de elementos de $I = \wp(B)$
- Función de concretización: \gamma
  - $\gamma : I^\alpha \to I$
- Función de abstracción: \alpha
  - $\alpha : I \to I^\alpha$
- Operador abstracto: T^{\alpha}_{P}
  - Es la versión abstracta de T_{P}
  - $T^\alpha_P : I^\alpha \to I^\alpha$
- Inserción de Galois: $(I^\alpha, \gamma, I, \alpha)$

Considerar que T^{\alpha}_{P} depende del programa abstracto P_{\alpha} (sería correcto decir $T^{\alpha}_{P_{\alpha}}$ en vez de T^{\alpha}_{P}).

Para demostrar exactitud o terminación se debe:
- Exactitud:
  - I^{\alpha} es un retículo completo
  - I^{\alpha} Debe aproximar a $I: \forall M \in I, \gamma(\alpha(M)) \supseteq M$
  - T^{\alpha}_{P} es una aproximación segura de T_{P}
    - i.e. $\forall d, d \in  I^\alpha, \gamma(T^\alpha_P(d)) \supseteq T_P(\gamma(d))$
- Terminacion:
  - T^{\alpha}_{P} es monótono
  - I^{\alpha} cadena ascendente finita.

Con esto se puede deducir que $H^\alpha = lfp(T^\alpha_P) = T^\alpha_P \uparrow n$ donde:
- $n$ es el número de pasos (finito)
- $H^\alpha$ aproximará a $H$.

La Figura ref:intabs_bottom_up muestra los elementos indicados anteriormente y la relación entre ellos. Obsérvese la separación entre los dos "dominios" de interpretación e interpretación abstracta y el uso de las funciones de concretización y abstracción para poder "ir y venir" entre ellos.

#+caption: Relación entre los elementos relevantes de la interpretación abstracta Bottom-Up. label:fig:intabs_bottom_up
[[file:imgs/bottomup.png]]

*** Ejemplo de inferencia de "tipos"

Sea el siguiente programa lógico P:

\begin{align*}
P = \{ & p(f(X)) \leftarrow p(X).\\
       & p(a).\\
       & r(X) \leftarrow t(X,Y).\\
       & q(a).\\
       & q(b). \}
\end{align*}

En prolog:

#+BEGIN_SRC ciao
p(f(X)) :- p(X). 
p(a). 
r(X) :- t(X,Y). 
q(a). 
q(b).
#+END_SRC

La representación abstracta de P:

\begin{align*}
P_\alpha = \{ & p \leftarrow p.\\
         & p.\\ 
         & r \leftarrow t.\\
         & q.\}
\end{align*}

Sea $B^\alpha = S$ el conjunto de símbolos de predicado en el programa P, se obtiene:

$$S = \{ p/1, q/1, r/1, t/2 \}$$

La función de abstracción $\alpha : I \to S^*$ se define como:

$$\alpha(\{p(a), p(b), q(a)\}) = \{ p/1, q/1 \}$$

La función de concretización $\gamma : S^* \to I$ se define como:

\begin{align*}
\gamma(\{p/1, q/1\}) & = \{ A \in B \;|\; pred(A) = p/1 \; \vee \; pred(A) = q/1\} \\
                & = \{p(a), p(b), p(f(a)), p(f(b)),\ldots, q(a), q(b), q(f(a)),\ldots \} 
\end{align*}

Por consiguiente, la versión abstracta de $T_P$ es $T^\alpha_P : S^* \to S^*$ se obtiene de la siguiente manera:

\begin{align*}
T^\alpha_P \uparrow 0 &= T^\alpha_P(\emptyset) = \{ p/1, q/1 \} \\
T^\alpha_P \uparrow 1 &= T^\alpha_P(\{ p/1, q/1 \}) \\
    &= \{ p/1, q/1 \} \\          
    &= T^\alpha_P \uparrow 0 = H^\alpha
\end{align*}

Por consiguiente, los "tipos" de datos deducidos son $\{ p/1, q/1 \} = H^\alpha$. Obsérvese que H^{\alpha} es la aproximación al modelo de Herbrand $H$ (todas las consecuencias lógicas del programa P).

Para utilizar el programa en Ciao Prolog se debe escribir lo siguiente:
#+BEGIN_SRC ciao
:- module(_, _, [assertions, nativeprops]).

p(f(X)) :- p(X). 
p(a). 
r(X) :- t(X,Y). 
q(a). 
q(b).

t(_,_).
#+END_SRC

El analizador de CiaoPP responde con la siguiente salida:

#+BEGIN_SRC ciao
:- module(_1,_2,[assertions,nativeprops,regtypes]).

:- true pred p(_A)
   : term(_A)
   => rt3(_A).

:- true pred p(_A)
   : mshare([[_A]])
   => ground([_A]).

p(f(X)) :-
    p(X).
p(a).

:- true pred r(X)
   : term(X)
   => term(X).

:- true pred r(X)
   : mshare([[X]])
   => mshare([[X]]).

r(X) :-
    t(X,Y).

:- true pred q(_A)
   : term(_A)
   => rt8(_A).

:- true pred q(_A)
   : mshare([[_A]])
   => ground([_A]).

q(a).
q(b).

:- true pred t(_1,_2)
   : ( term(_1), term(_2) )
   => ( term(_1), term(_2) ).

:- true pred t(_1,_2)
   : mshare([[_1],[_1,_2],[_2]])
   => mshare([[_1],[_1,_2],[_2]]).

t(_1,_2).


:- regtype rt3/1.
rt3(a).
rt3(f(A)) :-
    rt3(A).

:- regtype rt8/1.
rt8(a).
rt8(b).
#+END_SRC

En congruencia con los resultados de $H^\alpha$ planteados anteriormente, el analizador generó dos declaraciones de ~regtype~ denominadas ~rt3/1~ y ~rt8/1~. Al observarse los valores, se puede deducir que ~rt3/1~ corresponde con los de ~p/1~ y ~rt8/1~ con los de ~q/1~. 

* Footnotes

[fn:1] lfp significa /least fixed point/. gfp significa /greatest fixed point/.
* Meta     :noexport:

  # ----------------------------------------------------------------------
  #+TITLE:  Apuntes del Curso Análisis Estático de Programas Lógicos
  #+AUTHOR: Christian Gimenez
  #+DATE:   02 oct 2020
  #+EMAIL:
  #+DESCRIPTION: 
  #+KEYWORDS: 

  #+STARTUP: inlineimages hidestars content hideblocks entitiespretty
  #+STARTUP: indent fninline latexpreview

  #+OPTIONS: H:3 num:t toc:t \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t
  #+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  #+OPTIONS: tex:imagemagick

  #+TODO: TODO(t!) CURRENT(c!) PAUSED(p!) | DONE(d!) CANCELED(C!@)

  # -- Export
  #+LANGUAGE: en
  #+LINK_UP:   
  #+LINK_HOME: 
  #+EXPORT_SELECT_TAGS: export
  #+EXPORT_EXCLUDE_TAGS: noexport

  # -- HTML Export
  #+INFOJS_OPT: view:info toc:t ftoc:t ltoc:t mouse:underline buttons:t path:libs/org-info.js
  #+HTML_LINK_UP: index.html
  #+HTML_LINK_HOME: index.html
  #+XSLT:

  # -- For ox-twbs or HTML Export
  #+HTML_HEAD: <link href="libs/bootstrap.min.css" rel="stylesheet">
  # -- -- LaTeX-CSS
  #+HTML_HEAD: <link href="css/style-org.css" rel="stylesheet">
  
  #+HTML_HEAD: <script src="libs/jquery.min.js"></script> 
  #+HTML_HEAD: <script src="libs/bootstrap.min.js"></script>

  #+HTML_HEAD: <meta name="description" content="Apuntes del curso de Análisis Estático Estático de Programas Lógicos. ">
  #+HTML_HEAD: <meta name="keywords" content="Prolog, Ciao, CiaoPP, Análisis Estático">
  #+LANGUAGE: es

  # -- LaTeX Export
  # #+LATEX_CLASS: article
  # -- -- Tikz
  #+LATEX_HEADER: \usepackage{tikz}
  #+LATEX_HEADER: \usetikzlibrary{shapes.geometric}
  #+LATEX_HEADER: \usetikzlibrary{shapes.symbols}
  #+LATEX_HEADER: \usetikzlibrary{positioning}
  #+LATEX_HEADER: \usetikzlibrary{trees}
  
  # -- Tikz used in src ambients
  #+PROPERTY: header-args:latex :headers '("\\usepackage{tikz}" "\\usetikzlibrary{shapes.geometric}" "\\usetikzlibrary{shapes.symbols}" "\\usetikzlibrary{positioning}" "\\usetikzlibrary{arrows.meta}""\\usetikzlibrary{trees}" "\\usetikzlibrary{mindmap}") :results output :imagemagick t :border 1em :iminoptions -density 600 :imoutoptions -resize 1000 

  # #+LATEX_HEADER_EXTRA:

  # Local Variables:
  # org-hide-emphasis-markers: t
  # org-use-sub-superscripts: "{}"
  # fill-column: 80
  # visual-line-fringe-indicators: t
  # ispell-local-dictionary: "british"
  # End:
